---
title: "Classifying the Data"
format:
    html:
        code-fold: true 
        code-tools: true
        df-print: paged
jupyter: python3 
---

1. Loading the cleaned data sets. Change the file path to match the one that you need. 
    - selecting the necessary columns 
    - filtering out values that are null on dx_oth

```{python}
#| label: raw-data 
#| fig-cap: "The raw data when loaded from the CSV file"

import pandas as pd
import matplotlib.pyplot as plt

filepath = "/Users/clairelichty/summer2023/SwissTPH/AutomatedClassification/02_timci_day0_data.csv"
raw_df = pd.read_csv(filepath, low_memory=False)
df = pd.DataFrame(raw_df, columns = ["dx_oth", "child_id"])
data_to_be_sorted = df[(df.dx_oth.notnull())]
data_to_be_sorted
```

2. Start by creating the data structure that is going to be used to sort the items in the dataset 


```{python}
    df_with_buckets = pd.DataFrame(columns = ["dx_oth", "child_id", "category no."])
    df_with_buckets
```

3. Iterate through the list, if there is nothing already in the dataframe, as there is the first time, add it to the dataframe. 
    - The Category No. being one here means that this represents the first category, in order for something else to "qualify" for that category, it has to hit certain criteria, which are laid out in the function under point number 4. 

```{python}
    for dx_oth, child_id in zip(data_to_be_sorted["dx_oth"], data_to_be_sorted["child_id"]):
        if len(df_with_buckets) == 0: 
            df_with_buckets.loc[0] = [dx_oth, child_id, 1]
        else: 
            patient_data = (dx_oth, child_id)
    df_with_buckets
```

4. Comparing to the criteria
    - This function will take in the patient_data, as the tuple (dx_oth, child_id) and it will decide which bucket to place it in, or if to make a new bucket with it. 


